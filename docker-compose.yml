version: '3.8'

services:
  # Main AI Agent Service
  agent:
    build: 
      context: .
      dockerfile: Dockerfile
    container_name: ai-agent
    environment:
      # Slack Integration
      - SLACK_BOT_TOKEN=${SLACK_BOT_TOKEN}
      - SLACK_APP_TOKEN=${SLACK_APP_TOKEN}
      
      # Teams Integration (optional)
      - TEAMS_APP_ID=${TEAMS_APP_ID:-}
      - TEAMS_APP_PASSWORD=${TEAMS_APP_PASSWORD:-}
      
      # Database
      - DATABASE_URL=${DATABASE_URL:-postgresql://agent:agent@postgres:5432/agent_db}
      
      # Redis for caching
      - REDIS_URL=${REDIS_URL:-redis://redis:6379/0}
      
      # Configuration
      - AGENT_CONFIG_PATH=${AGENT_CONFIG_PATH:-/app/config/my-agent.yaml}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      
      # Security
      - JWT_SECRET=${JWT_SECRET:-change-this-secret}
      - ENCRYPTION_KEY=${ENCRYPTION_KEY:-change-this-key}
    
    volumes:
      - ./config:/app/config:ro
      - ./data:/app/data
      - agent_logs:/app/logs
    
    ports:
      - "${AGENT_PORT:-8080}:8080"
    
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
    
    restart: unless-stopped
    
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: ai-agent-db
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-agent}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-agent}
      - POSTGRES_DB=${POSTGRES_DB:-agent_db}
    
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init.sql:ro
    
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    
    restart: unless-stopped
    
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U agent"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for Caching & Session Management
  redis:
    image: redis:7-alpine
    container_name: ai-agent-redis
    command: redis-server --appendonly yes
    
    volumes:
      - redis_data:/data
    
    ports:
      - "${REDIS_PORT:-6379}:6379"
    
    restart: unless-stopped
    
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Prometheus for Monitoring (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: ai-agent-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    
    restart: unless-stopped
    
    profiles:
      - monitoring

  # Grafana for Visualization (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: ai-agent-grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_INSTALL_PLUGINS=grafana-clock-panel
    
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
    
    ports:
      - "${GRAFANA_PORT:-3000}:3000"
    
    depends_on:
      - prometheus
    
    restart: unless-stopped
    
    profiles:
      - monitoring

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  agent_logs:
    driver: local

networks:
  default:
    name: ai-agent-network
